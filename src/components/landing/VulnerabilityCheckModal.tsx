'use client';

import { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { X, Loader2, ShieldCheck, Download, Send } from 'lucide-react';
import { Button } from '../ui/button';
import { Input } from '../ui/input';

const fakeVulnerabilities = [
  "Scanning for open ports...",
  "Analyzing HTTP headers...",
  "Checking for SQL injection points...",
  "Found outdated 'jQuery v1.8.2'.",
  "Testing for Cross-Site Scripting (XSS)...",
  "Enumerating server directories...",
  "Discovered 'debug.log' file.",
  "Verifying SSL/TLS certificate strength...",
  "Weak cipher suite detected.",
  "Checking DNS records for misconfigurations...",
  "Scan complete."
];

export default function VulnerabilityCheckModal({
  isOpen,
  onClose,
  domain,
}: {
  isOpen: boolean;
  onClose: () => void;
  domain: string;
}) {
  const [step, setStep] = useState<'loading' | 'reportReady' | 'contactForm'>('loading');
  const [foundItems, setFoundItems] = useState<string[]>([]);
  const [fullName, setFullName] = useState('');
  const [email, setEmail] = useState('');

  useEffect(() => {
    if (isOpen) {
      // Reset state on open
      setStep('loading');
      setFoundItems([]);
      setFullName('');
      setEmail('');

      // Simulate loading vulnerabilities
      const loadingTimer = setTimeout(() => {
        setStep('reportReady');
      }, 5000);

      // Simulate finding items
      let foundIndex = 0;
      const interval = setInterval(() => {
        if (foundIndex < fakeVulnerabilities.length) {
          setFoundItems(prev => [...prev, fakeVulnerabilities[foundIndex]]);
          foundIndex++;
        } else {
          clearInterval(interval);
        }
      }, 400);

      return () => {
        clearTimeout(loadingTimer);
        clearInterval(interval);
      };
    }
  }, [isOpen]);

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    console.log("Lead captured:", { fullName, email, domain });
    onClose(); // Close modal after submission
  };

  const renderContent = () => {
    switch (step) {
      case 'loading':
        return (
          <div className="text-center">
            <h2 className="text-2xl font-bold text-foreground mb-2">Scanning {domain}...</h2>
            <p className="text-muted-foreground mb-6">Our automated scanner is checking for common vulnerabilities.</p>
            <Loader2 className="h-12 w-12 text-primary mx-auto animate-spin" />
            <div className="mt-6 text-left h-40 overflow-y-auto bg-secondary/50 p-3 rounded-md text-sm font-mono">
              {foundItems.map((item, index) => (
                <motion.p
                  key={index}
                  initial={{ opacity: 0, y: 10 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ delay: index * 0.1 }}
                  className="text-muted-foreground"
                >
                  <span className="text-green-400">&gt;</span> {item}
                </motion.p>
              ))}
            </div>
          </div>
        );
      case 'reportReady':
        return (
          <div className="text-center">
            <ShieldCheck className="h-16 w-16 text-green-500 mx-auto mb-4" />
            <h2 className="text-2xl font-bold text-foreground mb-2">Initial Report Ready!</h2>
            <p className="text-muted-foreground mb-8">
              Our initial scan is complete. Enter your details to receive the full, comprehensive report.
            </p>
            <div className="flex justify-center gap-4">
              <Button size="lg" onClick={() => setStep('contactForm')}>
                <Download className="mr-2 h-5 w-5" /> Download Report
              </Button>
              <Button size="lg" variant="outline" onClick={() => setStep('contactForm')}>
                <Send className="mr-2 h-5 w-5" /> Send to Mail
              </Button>
            </div>
          </div>
        );
      case 'contactForm':
        return (
          <div>
            <h2 className="text-2xl font-bold text-foreground mb-2 text-center">Get Your Free Report</h2>
            <p className="text-muted-foreground mb-6 text-center">Enter your details below to access the report for {domain}.</p>
            <form onSubmit={handleSubmit} className="space-y-4">
              <Input
                type="text"
                placeholder="Full Name"
                className="bg-background h-12"
                value={fullName}
                onChange={(e) => setFullName(e.target.value)}
                required
              />
              <Input
                type="email"
                placeholder="Company Email"
                className="bg-background h-12"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                required
              />
              <motion.div whileTap={{ scale: 0.95 }}>
                <Button type="submit" className="w-full h-12 text-base">
                  Get Report Now
                </Button>
              </motion.div>
            </form>
          </div>
        );
    }
  };

  return (
    <AnimatePresence>
      {isOpen && (
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          exit={{ opacity: 0 }}
          className="fixed inset-0 z-50 flex items-center justify-center bg-black/80 backdrop-blur-sm"
          onClick={onClose}
        >
          <motion.div
            initial={{ opacity: 0, scale: 0.9, y: 20 }}
            animate={{ opacity: 1, scale: 1, y: 0 }}
            exit={{ opacity: 0, scale: 0.9, y: 20 }}
            transition={{ duration: 0.3, ease: 'easeInOut' }}
            className="relative w-full max-w-lg rounded-lg p-8 bg-card border"
            onClick={(e) => e.stopPropagation()}
          >
            <button
              onClick={onClose}
              className="absolute top-4 right-4 text-muted-foreground hover:text-foreground"
            >
              <X className="h-6 w-6" />
            </button>
            {renderContent()}
          </motion.div>
        </motion.div>
      )}
    </AnimatePresence>
  );
}
